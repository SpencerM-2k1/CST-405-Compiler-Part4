// Global variables with multiple types

array int arr[5];   // Integer array
float scalar;       // Float variable
int i;              // Loop index for array initialization
float sum;          // Integer variable
int result;         // Float result of arithmetic operation

// Function declaration with different variable types and arithmetic expressions

int addAndMultiply(int x, int y, float z) {

    int result;
    result = (x + y) * z;   // Expression temporarily casts to float during
                            // multiplication step. Expression casts back to 
                            // int when stored into `result` (because result
                            // is an integer)
    return result;

}

// Main function demonstrating array use, function call, and arithmetic expressions

scalar = 5.5;
write scalar;


// Initialize array with arithmetic expressions
i = 3;
arr[i] = i * 2 + 1;  //some calculation
write arr[i];

i = i +1;
arr[i]  = arr[i] + arr[i-1]; //Effectively, arr[4] = arr[3] because uninitialized
                             //variables are equal to 0.
write arr[i];
   

// Call function with array elements and scalar

sum = addAndMultiply(arr[i], arr[i-1], scalar);
write sum;

// Complex arithmetic expression using array and global float

result = sum / scalar + arr[i-1] * scalar - (arr[i] + scalar);
write result;