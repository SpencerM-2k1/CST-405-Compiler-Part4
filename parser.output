State 0 conflicts: 1 shift/reduce
State 5 conflicts: 1 shift/reduce
State 6 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 118 conflicts: 2 shift/reduce
State 120 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 135 conflicts: 11 reduce/reduce
State 142 conflicts: 2 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList StmtList

    2 DeclList: ε
    3         | VarDecl DeclList
    4         | VarDeclInit DeclList
    5         | FuncDecl DeclList

    6 VarDeclList: ε
    7            | VarDecl VarDeclList

    8 VarDecl: TYPE ID SEMI
    9        | ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI

   10 VarDeclInit: TYPE ID ASSIGN Expr SEMI

   11 @1: ε

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

   13 ParamList: ε
   14          | Param
   15          | Param COMMA ParamList

   16 Param: TYPE ID

   17 StmtList: ε
   18         | Stmt StmtList

   19 Stmt: ID ASSIGN Expr SEMI
   20     | ID LBRACKET Expr RBRACKET ASSIGN Expr SEMI
   21     | VarDeclInit
   22     | WRITE Expr SEMI
   23     | FuncCall SEMI
   24     | ReturnStmt SEMI
   25     | IfStmt
   26     | WhileStmt
   27     | BreakStmt

   28 IfStmt: IF LPAREN Expr RPAREN Block
   29       | IF LPAREN Expr RPAREN Block ELSE Block
   30       | IF LPAREN Expr RPAREN Block ElifList

   31 ElifList: ELIF LPAREN Expr RPAREN Block
   32         | ELIF LPAREN Expr RPAREN Block ElifList
   33         | ELSE Block

   34 Block: LBRACE VarDeclList StmtList RBRACE
   35      | Stmt

   36 WhileStmt: WHILE LPAREN Expr RPAREN Block

   37 BreakStmt: BREAK SEMI

   38 Expr: MINUS Expr
   39     | NOT Expr
   40     | Expr PLUS Expr
   41     | Expr MINUS Expr
   42     | Expr MULTIPLY Expr
   43     | Expr DIVIDE Expr
   44     | Expr MOD Expr
   45     | Expr AND Expr
   46     | Expr OR Expr
   47     | Expr GREATER_THAN Expr
   48     | Expr LESS_THAN Expr
   49     | Expr GREATER_EQUAL Expr
   50     | Expr LESS_EQUAL Expr
   51     | Expr EQUAL_EQUAL Expr
   52     | Expr NOT_EQUAL Expr
   53     | ID
   54     | ID LBRACKET Expr RBRACKET
   55     | INT_NUMBER
   56     | FLOAT_NUMBER
   57     | CHAR_VALUE
   58     | CONST_TRUE
   59     | CONST_FALSE
   60     | FuncCall
   61     | LPAREN Expr RPAREN

   62 FuncCall: ID LPAREN ArgList RPAREN

   63 ArgList: ε
   64        | Arg
   65        | Arg COMMA ArgList

   66 Arg: Expr

   67 ReturnStmt: RETURN
   68           | RETURN Expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <sval> (258) 8 9 10 12 16
    ID <sval> (259) 8 9 10 12 16 19 20 53 54 62
    SEMI (260) 8 9 10 19 20 22 23 24 37
    ASSIGN <sval> (261) 10 19 20
    INT_NUMBER <intVal> (262) 9 55
    FLOAT_NUMBER <floatVal> (263) 56
    CHAR_VALUE <charVal> (264) 57
    CONST_TRUE (265) 58
    CONST_FALSE (266) 59
    WRITE (267) 22
    ARRAY (268) 9
    RETURN (269) 67 68
    LPAREN (270) 12 28 29 30 31 32 36 61 62
    RPAREN (271) 12 28 29 30 31 32 36 61 62
    LBRACE (272) 12 34
    RBRACE (273) 12 34
    LBRACKET (274) 9 20 54
    RBRACKET (275) 9 20 54
    COMMA (276) 15 65
    IF (277) 28 29 30
    ELSE (278) 29 33
    ELIF (279) 31 32
    WHILE (280) 36
    BREAK (281) 37
    NOT <sval> (282) 39
    AND <sval> (283) 45
    OR <sval> (284) 46
    GREATER_THAN <sval> (285) 47
    LESS_THAN <sval> (286) 48
    EQUAL_EQUAL <sval> (287) 51
    NOT_EQUAL <sval> (288) 52
    GREATER_EQUAL <sval> (289) 49
    LESS_EQUAL <sval> (290) 50
    PLUS <sval> (291) 40
    MINUS <sval> (292) 38 41
    MULTIPLY <sval> (293) 42
    DIVIDE <sval> (294) 43
    MOD <sval> (295) 44


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Program <ast> (42)
        on left: 1
        on right: 0
    DeclList <ast> (43)
        on left: 2 3 4 5
        on right: 1 3 4 5
    VarDeclList <ast> (44)
        on left: 6 7
        on right: 7 12 34
    VarDecl <ast> (45)
        on left: 8 9
        on right: 3 7
    VarDeclInit <ast> (46)
        on left: 10
        on right: 4 21
    FuncDecl <ast> (47)
        on left: 12
        on right: 5
    @1 (48)
        on left: 11
        on right: 12
    ParamList <ast> (49)
        on left: 13 14 15
        on right: 12 15
    Param <ast> (50)
        on left: 16
        on right: 14 15
    StmtList <ast> (51)
        on left: 17 18
        on right: 1 12 18 34
    Stmt <ast> (52)
        on left: 19 20 21 22 23 24 25 26 27
        on right: 18 35
    IfStmt <ast> (53)
        on left: 28 29 30
        on right: 25
    ElifList <ast> (54)
        on left: 31 32 33
        on right: 30 32
    Block <ast> (55)
        on left: 34 35
        on right: 28 29 30 31 32 33 36
    WhileStmt <ast> (56)
        on left: 36
        on right: 26
    BreakStmt <ast> (57)
        on left: 37
        on right: 27
    Expr <ast> (58)
        on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
        on right: 10 19 20 22 28 29 30 31 32 36 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 54 61 66 68
    FuncCall <ast> (59)
        on left: 62
        on right: 23 60
    ArgList <ast> (60)
        on left: 63 64 65
        on right: 62 65
    Arg <ast> (61)
        on left: 66
        on right: 64 65
    ReturnStmt <ast> (62)
        on left: 67 68
        on right: 24


State 0

    0 $accept: • Program $end

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    Program      go to state 3
    DeclList     go to state 4
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 1

    8 VarDecl: TYPE • ID SEMI
   10 VarDeclInit: TYPE • ID ASSIGN Expr SEMI
   12 FuncDecl: TYPE • ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    ID  shift, and go to state 8


State 2

    9 VarDecl: ARRAY • TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI

    TYPE  shift, and go to state 9


State 3

    0 $accept: Program • $end

    $end  shift, and go to state 10


State 4

    1 Program: DeclList • StmtList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 18
    StmtList     go to state 19
    Stmt         go to state 20
    IfStmt       go to state 21
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 5

    3 DeclList: VarDecl • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 26
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 6

    4 DeclList: VarDeclInit • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 27
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 7

    5 DeclList: FuncDecl • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 28
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 8

    8 VarDecl: TYPE ID • SEMI
   10 VarDeclInit: TYPE ID • ASSIGN Expr SEMI
   12 FuncDecl: TYPE ID • @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    SEMI    shift, and go to state 29
    ASSIGN  shift, and go to state 30

    $default  reduce using rule 11 (@1)

    @1  go to state 31


State 9

    9 VarDecl: ARRAY TYPE • ID LBRACKET INT_NUMBER RBRACKET SEMI

    ID  shift, and go to state 32


State 10

    0 $accept: Program $end •

    $default  accept


State 11

   10 VarDeclInit: TYPE • ID ASSIGN Expr SEMI

    ID  shift, and go to state 33


State 12

   19 Stmt: ID • ASSIGN Expr SEMI
   20     | ID • LBRACKET Expr RBRACKET ASSIGN Expr SEMI
   62 FuncCall: ID • LPAREN ArgList RPAREN

    ASSIGN    shift, and go to state 34
    LPAREN    shift, and go to state 35
    LBRACKET  shift, and go to state 36


State 13

   22 Stmt: WRITE • Expr SEMI

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 46
    FuncCall  go to state 47


State 14

   67 ReturnStmt: RETURN •
   68           | RETURN • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    $default  reduce using rule 67 (ReturnStmt)

    Expr      go to state 48
    FuncCall  go to state 47


State 15

   28 IfStmt: IF • LPAREN Expr RPAREN Block
   29       | IF • LPAREN Expr RPAREN Block ELSE Block
   30       | IF • LPAREN Expr RPAREN Block ElifList

    LPAREN  shift, and go to state 49


State 16

   36 WhileStmt: WHILE • LPAREN Expr RPAREN Block

    LPAREN  shift, and go to state 50


State 17

   37 BreakStmt: BREAK • SEMI

    SEMI  shift, and go to state 51


State 18

   21 Stmt: VarDeclInit •

    $default  reduce using rule 21 (Stmt)


State 19

    1 Program: DeclList StmtList •

    $default  reduce using rule 1 (Program)


State 20

   18 StmtList: Stmt • StmtList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 18
    StmtList     go to state 52
    Stmt         go to state 20
    IfStmt       go to state 21
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 21

   25 Stmt: IfStmt •

    $default  reduce using rule 25 (Stmt)


State 22

   26 Stmt: WhileStmt •

    $default  reduce using rule 26 (Stmt)


State 23

   27 Stmt: BreakStmt •

    $default  reduce using rule 27 (Stmt)


State 24

   23 Stmt: FuncCall • SEMI

    SEMI  shift, and go to state 53


State 25

   24 Stmt: ReturnStmt • SEMI

    SEMI  shift, and go to state 54


State 26

    3 DeclList: VarDecl DeclList •

    $default  reduce using rule 3 (DeclList)


State 27

    4 DeclList: VarDeclInit DeclList •

    $default  reduce using rule 4 (DeclList)


State 28

    5 DeclList: FuncDecl DeclList •

    $default  reduce using rule 5 (DeclList)


State 29

    8 VarDecl: TYPE ID SEMI •

    $default  reduce using rule 8 (VarDecl)


State 30

   10 VarDeclInit: TYPE ID ASSIGN • Expr SEMI

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 55
    FuncCall  go to state 47


State 31

   12 FuncDecl: TYPE ID @1 • LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    LPAREN  shift, and go to state 56


State 32

    9 VarDecl: ARRAY TYPE ID • LBRACKET INT_NUMBER RBRACKET SEMI

    LBRACKET  shift, and go to state 57


State 33

   10 VarDeclInit: TYPE ID • ASSIGN Expr SEMI

    ASSIGN  shift, and go to state 30


State 34

   19 Stmt: ID ASSIGN • Expr SEMI

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 58
    FuncCall  go to state 47


State 35

   62 FuncCall: ID LPAREN • ArgList RPAREN

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    $default  reduce using rule 63 (ArgList)

    Expr      go to state 59
    FuncCall  go to state 47
    ArgList   go to state 60
    Arg       go to state 61


State 36

   20 Stmt: ID LBRACKET • Expr RBRACKET ASSIGN Expr SEMI

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 62
    FuncCall  go to state 47


State 37

   53 Expr: ID •
   54     | ID • LBRACKET Expr RBRACKET
   62 FuncCall: ID • LPAREN ArgList RPAREN

    LPAREN    shift, and go to state 35
    LBRACKET  shift, and go to state 63

    $default  reduce using rule 53 (Expr)


State 38

   55 Expr: INT_NUMBER •

    $default  reduce using rule 55 (Expr)


State 39

   56 Expr: FLOAT_NUMBER •

    $default  reduce using rule 56 (Expr)


State 40

   57 Expr: CHAR_VALUE •

    $default  reduce using rule 57 (Expr)


State 41

   58 Expr: CONST_TRUE •

    $default  reduce using rule 58 (Expr)


State 42

   59 Expr: CONST_FALSE •

    $default  reduce using rule 59 (Expr)


State 43

   61 Expr: LPAREN • Expr RPAREN

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 64
    FuncCall  go to state 47


State 44

   39 Expr: NOT • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 65
    FuncCall  go to state 47


State 45

   38 Expr: MINUS • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 66
    FuncCall  go to state 47


State 46

   22 Stmt: WRITE Expr • SEMI
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 67
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 47

   60 Expr: FuncCall •

    $default  reduce using rule 60 (Expr)


State 48

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr
   68 ReturnStmt: RETURN Expr •

    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80

    $default  reduce using rule 68 (ReturnStmt)


State 49

   28 IfStmt: IF LPAREN • Expr RPAREN Block
   29       | IF LPAREN • Expr RPAREN Block ELSE Block
   30       | IF LPAREN • Expr RPAREN Block ElifList

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 81
    FuncCall  go to state 47


State 50

   36 WhileStmt: WHILE LPAREN • Expr RPAREN Block

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 82
    FuncCall  go to state 47


State 51

   37 BreakStmt: BREAK SEMI •

    $default  reduce using rule 37 (BreakStmt)


State 52

   18 StmtList: Stmt StmtList •

    $default  reduce using rule 18 (StmtList)


State 53

   23 Stmt: FuncCall SEMI •

    $default  reduce using rule 23 (Stmt)


State 54

   24 Stmt: ReturnStmt SEMI •

    $default  reduce using rule 24 (Stmt)


State 55

   10 VarDeclInit: TYPE ID ASSIGN Expr • SEMI
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 83
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 56

   12 FuncDecl: TYPE ID @1 LPAREN • ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    TYPE  shift, and go to state 84

    $default  reduce using rule 13 (ParamList)

    ParamList  go to state 85
    Param      go to state 86


State 57

    9 VarDecl: ARRAY TYPE ID LBRACKET • INT_NUMBER RBRACKET SEMI

    INT_NUMBER  shift, and go to state 87


State 58

   19 Stmt: ID ASSIGN Expr • SEMI
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 88
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 59

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr
   66 Arg: Expr •

    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80

    $default  reduce using rule 66 (Arg)


State 60

   62 FuncCall: ID LPAREN ArgList • RPAREN

    RPAREN  shift, and go to state 89


State 61

   64 ArgList: Arg •
   65        | Arg • COMMA ArgList

    COMMA  shift, and go to state 90

    $default  reduce using rule 64 (ArgList)


State 62

   20 Stmt: ID LBRACKET Expr • RBRACKET ASSIGN Expr SEMI
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    RBRACKET       shift, and go to state 91
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 63

   54 Expr: ID LBRACKET • Expr RBRACKET

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 92
    FuncCall  go to state 47


State 64

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr
   61     | LPAREN Expr • RPAREN

    RPAREN         shift, and go to state 93
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 65

   39 Expr: NOT Expr •
   40     | Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80

    $default  reduce using rule 39 (Expr)


State 66

   38 Expr: MINUS Expr •
   40     | Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    $default  reduce using rule 38 (Expr)


State 67

   22 Stmt: WRITE Expr SEMI •

    $default  reduce using rule 22 (Stmt)


State 68

   45 Expr: Expr AND • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 94
    FuncCall  go to state 47


State 69

   46 Expr: Expr OR • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 95
    FuncCall  go to state 47


State 70

   47 Expr: Expr GREATER_THAN • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 96
    FuncCall  go to state 47


State 71

   48 Expr: Expr LESS_THAN • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 97
    FuncCall  go to state 47


State 72

   51 Expr: Expr EQUAL_EQUAL • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 98
    FuncCall  go to state 47


State 73

   52 Expr: Expr NOT_EQUAL • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 99
    FuncCall  go to state 47


State 74

   49 Expr: Expr GREATER_EQUAL • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 100
    FuncCall  go to state 47


State 75

   50 Expr: Expr LESS_EQUAL • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 101
    FuncCall  go to state 47


State 76

   40 Expr: Expr PLUS • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 102
    FuncCall  go to state 47


State 77

   41 Expr: Expr MINUS • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 103
    FuncCall  go to state 47


State 78

   42 Expr: Expr MULTIPLY • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 104
    FuncCall  go to state 47


State 79

   43 Expr: Expr DIVIDE • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 105
    FuncCall  go to state 47


State 80

   44 Expr: Expr MOD • Expr

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 106
    FuncCall  go to state 47


State 81

   28 IfStmt: IF LPAREN Expr • RPAREN Block
   29       | IF LPAREN Expr • RPAREN Block ELSE Block
   30       | IF LPAREN Expr • RPAREN Block ElifList
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    RPAREN         shift, and go to state 107
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 82

   36 WhileStmt: WHILE LPAREN Expr • RPAREN Block
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    RPAREN         shift, and go to state 108
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 83

   10 VarDeclInit: TYPE ID ASSIGN Expr SEMI •

    $default  reduce using rule 10 (VarDeclInit)


State 84

   16 Param: TYPE • ID

    ID  shift, and go to state 109


State 85

   12 FuncDecl: TYPE ID @1 LPAREN ParamList • RPAREN LBRACE VarDeclList StmtList RBRACE

    RPAREN  shift, and go to state 110


State 86

   14 ParamList: Param •
   15          | Param • COMMA ParamList

    COMMA  shift, and go to state 111

    $default  reduce using rule 14 (ParamList)


State 87

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER • RBRACKET SEMI

    RBRACKET  shift, and go to state 112


State 88

   19 Stmt: ID ASSIGN Expr SEMI •

    $default  reduce using rule 19 (Stmt)


State 89

   62 FuncCall: ID LPAREN ArgList RPAREN •

    $default  reduce using rule 62 (FuncCall)


State 90

   65 ArgList: Arg COMMA • ArgList

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    $default  reduce using rule 63 (ArgList)

    Expr      go to state 59
    FuncCall  go to state 47
    ArgList   go to state 113
    Arg       go to state 61


State 91

   20 Stmt: ID LBRACKET Expr RBRACKET • ASSIGN Expr SEMI

    ASSIGN  shift, and go to state 114


State 92

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr
   54     | ID LBRACKET Expr • RBRACKET

    RBRACKET       shift, and go to state 115
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 93

   61 Expr: LPAREN Expr RPAREN •

    $default  reduce using rule 61 (Expr)


State 94

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   45     | Expr AND Expr •
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80

    $default  reduce using rule 45 (Expr)


State 95

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   46     | Expr OR Expr •
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80

    $default  reduce using rule 46 (Expr)


State 96

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   47     | Expr GREATER_THAN Expr •
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 47 (Expr)


State 97

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   48     | Expr LESS_THAN Expr •
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 48 (Expr)


State 98

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   51     | Expr EQUAL_EQUAL Expr •
   52     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 51 (Expr)


State 99

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr
   52     | Expr NOT_EQUAL Expr •

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 52 (Expr)


State 100

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   49     | Expr GREATER_EQUAL Expr •
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 49 (Expr)


State 101

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   50     | Expr LESS_EQUAL Expr •
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 76
    MINUS     shift, and go to state 77
    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 50 (Expr)


State 102

   40 Expr: Expr • PLUS Expr
   40     | Expr PLUS Expr •
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    $default  reduce using rule 40 (Expr)


State 103

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   41     | Expr MINUS Expr •
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MOD       shift, and go to state 80

    $default  reduce using rule 41 (Expr)


State 104

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   42     | Expr MULTIPLY Expr •
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    $default  reduce using rule 42 (Expr)


State 105

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   43     | Expr DIVIDE Expr •
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    $default  reduce using rule 43 (Expr)


State 106

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   44     | Expr MOD Expr •
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    $default  reduce using rule 44 (Expr)


State 107

   28 IfStmt: IF LPAREN Expr RPAREN • Block
   29       | IF LPAREN Expr RPAREN • Block ELSE Block
   30       | IF LPAREN Expr RPAREN • Block ElifList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 116
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    VarDeclInit  go to state 18
    Stmt         go to state 117
    IfStmt       go to state 21
    Block        go to state 118
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 108

   36 WhileStmt: WHILE LPAREN Expr RPAREN • Block

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 116
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    VarDeclInit  go to state 18
    Stmt         go to state 117
    IfStmt       go to state 21
    Block        go to state 119
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 109

   16 Param: TYPE ID •

    $default  reduce using rule 16 (Param)


State 110

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN • LBRACE VarDeclList StmtList RBRACE

    LBRACE  shift, and go to state 120


State 111

   15 ParamList: Param COMMA • ParamList

    TYPE  shift, and go to state 84

    $default  reduce using rule 13 (ParamList)

    ParamList  go to state 121
    Param      go to state 86


State 112

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET • SEMI

    SEMI  shift, and go to state 122


State 113

   65 ArgList: Arg COMMA ArgList •

    $default  reduce using rule 65 (ArgList)


State 114

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN • Expr SEMI

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 123
    FuncCall  go to state 47


State 115

   54 Expr: ID LBRACKET Expr RBRACKET •

    $default  reduce using rule 54 (Expr)


State 116

   34 Block: LBRACE • VarDeclList StmtList RBRACE

    TYPE   shift, and go to state 124
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 125
    VarDecl      go to state 126


State 117

   35 Block: Stmt •

    $default  reduce using rule 35 (Block)


State 118

   28 IfStmt: IF LPAREN Expr RPAREN Block •
   29       | IF LPAREN Expr RPAREN Block • ELSE Block
   30       | IF LPAREN Expr RPAREN Block • ElifList

    ELSE  shift, and go to state 127
    ELIF  shift, and go to state 128

    ELSE      [reduce using rule 28 (IfStmt)]
    ELIF      [reduce using rule 28 (IfStmt)]
    $default  reduce using rule 28 (IfStmt)

    ElifList  go to state 129


State 119

   36 WhileStmt: WHILE LPAREN Expr RPAREN Block •

    $default  reduce using rule 36 (WhileStmt)


State 120

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE • VarDeclList StmtList RBRACE

    TYPE   shift, and go to state 124
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 130
    VarDecl      go to state 126


State 121

   15 ParamList: Param COMMA ParamList •

    $default  reduce using rule 15 (ParamList)


State 122

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI •

    $default  reduce using rule 9 (VarDecl)


State 123

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN Expr • SEMI
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 131
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 124

    8 VarDecl: TYPE • ID SEMI

    ID  shift, and go to state 132


State 125

   34 Block: LBRACE VarDeclList • StmtList RBRACE

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 18
    StmtList     go to state 133
    Stmt         go to state 20
    IfStmt       go to state 21
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 126

    7 VarDeclList: VarDecl • VarDeclList

    TYPE   shift, and go to state 124
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 134
    VarDecl      go to state 126


State 127

   29 IfStmt: IF LPAREN Expr RPAREN Block ELSE • Block
   33 ElifList: ELSE • Block

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 116
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    VarDeclInit  go to state 18
    Stmt         go to state 117
    IfStmt       go to state 21
    Block        go to state 135
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 128

   31 ElifList: ELIF • LPAREN Expr RPAREN Block
   32         | ELIF • LPAREN Expr RPAREN Block ElifList

    LPAREN  shift, and go to state 136


State 129

   30 IfStmt: IF LPAREN Expr RPAREN Block ElifList •

    $default  reduce using rule 30 (IfStmt)


State 130

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList • StmtList RBRACE

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 18
    StmtList     go to state 137
    Stmt         go to state 20
    IfStmt       go to state 21
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 131

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN Expr SEMI •

    $default  reduce using rule 20 (Stmt)


State 132

    8 VarDecl: TYPE ID • SEMI

    SEMI  shift, and go to state 29


State 133

   34 Block: LBRACE VarDeclList StmtList • RBRACE

    RBRACE  shift, and go to state 138


State 134

    7 VarDeclList: VarDecl VarDeclList •

    $default  reduce using rule 7 (VarDeclList)


State 135

   29 IfStmt: IF LPAREN Expr RPAREN Block ELSE Block •
   33 ElifList: ELSE Block •

    $end      reduce using rule 29 (IfStmt)
    $end      [reduce using rule 33 (ElifList)]
    TYPE      reduce using rule 29 (IfStmt)
    TYPE      [reduce using rule 33 (ElifList)]
    ID        reduce using rule 29 (IfStmt)
    ID        [reduce using rule 33 (ElifList)]
    WRITE     reduce using rule 29 (IfStmt)
    WRITE     [reduce using rule 33 (ElifList)]
    RETURN    reduce using rule 29 (IfStmt)
    RETURN    [reduce using rule 33 (ElifList)]
    RBRACE    reduce using rule 29 (IfStmt)
    RBRACE    [reduce using rule 33 (ElifList)]
    IF        reduce using rule 29 (IfStmt)
    IF        [reduce using rule 33 (ElifList)]
    ELSE      reduce using rule 29 (IfStmt)
    ELSE      [reduce using rule 33 (ElifList)]
    ELIF      reduce using rule 29 (IfStmt)
    ELIF      [reduce using rule 33 (ElifList)]
    WHILE     reduce using rule 29 (IfStmt)
    WHILE     [reduce using rule 33 (ElifList)]
    BREAK     reduce using rule 29 (IfStmt)
    BREAK     [reduce using rule 33 (ElifList)]
    $default  reduce using rule 29 (IfStmt)


State 136

   31 ElifList: ELIF LPAREN • Expr RPAREN Block
   32         | ELIF LPAREN • Expr RPAREN Block ElifList

    ID            shift, and go to state 37
    INT_NUMBER    shift, and go to state 38
    FLOAT_NUMBER  shift, and go to state 39
    CHAR_VALUE    shift, and go to state 40
    CONST_TRUE    shift, and go to state 41
    CONST_FALSE   shift, and go to state 42
    LPAREN        shift, and go to state 43
    NOT           shift, and go to state 44
    MINUS         shift, and go to state 45

    Expr      go to state 139
    FuncCall  go to state 47


State 137

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList • RBRACE

    RBRACE  shift, and go to state 140


State 138

   34 Block: LBRACE VarDeclList StmtList RBRACE •

    $default  reduce using rule 34 (Block)


State 139

   31 ElifList: ELIF LPAREN Expr • RPAREN Block
   32         | ELIF LPAREN Expr • RPAREN Block ElifList
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | Expr • MOD Expr
   45     | Expr • AND Expr
   46     | Expr • OR Expr
   47     | Expr • GREATER_THAN Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • GREATER_EQUAL Expr
   50     | Expr • LESS_EQUAL Expr
   51     | Expr • EQUAL_EQUAL Expr
   52     | Expr • NOT_EQUAL Expr

    RPAREN         shift, and go to state 141
    AND            shift, and go to state 68
    OR             shift, and go to state 69
    GREATER_THAN   shift, and go to state 70
    LESS_THAN      shift, and go to state 71
    EQUAL_EQUAL    shift, and go to state 72
    NOT_EQUAL      shift, and go to state 73
    GREATER_EQUAL  shift, and go to state 74
    LESS_EQUAL     shift, and go to state 75
    PLUS           shift, and go to state 76
    MINUS          shift, and go to state 77
    MULTIPLY       shift, and go to state 78
    DIVIDE         shift, and go to state 79
    MOD            shift, and go to state 80


State 140

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE •

    $default  reduce using rule 12 (FuncDecl)


State 141

   31 ElifList: ELIF LPAREN Expr RPAREN • Block
   32         | ELIF LPAREN Expr RPAREN • Block ElifList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 116
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    VarDeclInit  go to state 18
    Stmt         go to state 117
    IfStmt       go to state 21
    Block        go to state 142
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 142

   31 ElifList: ELIF LPAREN Expr RPAREN Block •
   32         | ELIF LPAREN Expr RPAREN Block • ElifList

    ELSE  shift, and go to state 143
    ELIF  shift, and go to state 128

    ELSE      [reduce using rule 31 (ElifList)]
    ELIF      [reduce using rule 31 (ElifList)]
    $default  reduce using rule 31 (ElifList)

    ElifList  go to state 144


State 143

   33 ElifList: ELSE • Block

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 116
    IF      shift, and go to state 15
    WHILE   shift, and go to state 16
    BREAK   shift, and go to state 17

    VarDeclInit  go to state 18
    Stmt         go to state 117
    IfStmt       go to state 21
    Block        go to state 145
    WhileStmt    go to state 22
    BreakStmt    go to state 23
    FuncCall     go to state 24
    ReturnStmt   go to state 25


State 144

   32 ElifList: ELIF LPAREN Expr RPAREN Block ElifList •

    $default  reduce using rule 32 (ElifList)


State 145

   33 ElifList: ELSE Block •

    $default  reduce using rule 33 (ElifList)
